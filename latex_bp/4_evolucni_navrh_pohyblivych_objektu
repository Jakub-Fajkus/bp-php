4. Evolucni navrh pohyblivych objektu - HLAVNI KAPITOLA BP - zde
popisteje podrobne vlastni techniky, ktere pro EVOLUCI pouzivate. Fakta
o EA budou vychazet k kapitoly 2.


Cpp cast
- popis interpretu
- popis jazyka
- podprogramy
- input hodnoty (koste)
- prevod outputu na silu v kloubech ??
- spojeni interpretu a simulatoru
- pocitani fitness!

php cast
- popis evoluce
    - algoritmus
    - genotyp
    - instance EA - populace, delka, selekce, crossover, mutace

spojeni php a cpp

Simulace
--------
V simulátoru Mujoco je vytvořena scéna, která obsahuje model robota a množinu referenčních bodů, které svým pořadím a umístěním ve scéně definují trajektorii, kterou má robot následovat.


Interpret
---------
Program, který řídí model robota, je vykonáván v interpretu.
Interpret obsahuje paměťová místa, kterým se říká registry, které se dělí na: vstupní, výstupní a konstantní.
Každý registr je indetifikovaný unikátním číslem, které se navýzá index, a může obsahovat celočíselné hodnoty v rozsahu od -5 do 5.
Počty registrů jsou následující: 11 konstatních registrů s hodnotami od -5 do 5, 2 vstupní registry, a 3 nebo 12 výstupních registrů (pro každý kloub modelu jeden registr).
Interpret vykonává program, který je složen z instrukcí.

Je zde použit jen jeden druh instrukce, a to instukce s názvem COPY.
Tato instrukce má 2 parametry: zdrojový registr a cílový registr.
Výsledkem této instrukce je zkopírování hodnoty ze vstupního, nebo konstatního, registru do výstupního registru.

Vykonávání programu
-------------------
V průběhu simulace je vykonáván program, který čte hodnoty ze vstupních registrů, které obsahují informaci o směru k dalšímu referenčnímu bodu, a zapisuje hodnoty do výstupních registrů, které se převádí na sílu, která je aplikována v jednotlivých kloubech.

Podprogramy
-----------
Každý program, který reprezentuje kandidátní řešení, je pro vykonávání v průběhu simulace rozdělen na 3 podprogramy.
Tyto podprogramy se nazývají init, main a event.

Podprogram init se vykoná pouze na začátku simulace a všechny instrukce jsou provedeny v nulovém čase a poté je po 1 sekundě spuštěn podprogram main.
Účelem podprogramu init je nastavení počátečního natočení kloubů modelu.

Podprogram main je v průběhu simulace vykonáván v nekonečné smyčce.
Instrukce v tomto podprogramu se nevykonají všechny v nulovém čase, ale vyonávají se s periodou 0.3 sekundy.
Jedná se o nejdelší a nejdůležitější podprogram.

Podprogram event se vykoná v situaci, kdy se model přiblíží do určené vzdálenosti od referenčního bodu, avšak pro každý referenční bod pouze jednou.
Stejně jako u podprogramu init jsou instrukce provedeny v nulovém čase a poté je po 1 sekundě spuštěn podprogram main.
Účelem podprogramu event je změna natočení kloubů modelu jako příprava k pohybu k následujícímu referečnímu bodu.

Input hodnoty
-------------
Hodnoty, které se ukládájí do vstupních registrů, vychází z informace o směru k následujícímu referenčnímu bodu.
Informace o směru je opět vyjádřena číslem od -5 do 5 a vypočítává se následujícím mechanismem.

Prostor kolem modelu je rozdělen na několik kruhových výsečí, kde každá výseč je ohodnocena číslem od -5 do 5, viz obr. KOŠTĚ.
Informace o směru je rovna ohodnocení výseče, ve které se nachází další referenční bod.
Tato informace je v nezměněné podobě vložena do prvního vstupního registru.
Do druhého registru je vložena hodnota s převráceným znaménkem.

Na obrázku KOŠTĚ můžeme vidět situaci, kdy model (na obrázku dole) směřuje směrem nahoru a další referenční bod (modře) se nachází ve výseči ohodnocené číslem 2.
Hodnoty vstupních registrů budou tedy čísla 2 a -2.

Výstupní registry
----------------
Každý z výstupních registrů interpretu odpovídá jednomu kloubu modelu.
Hodnoty z výstupního registru jsou z interpretu čteny a převádí se na ovládací signály, které se předávají simulátoru.
Hodnota (ovládací signál) v sobě obsahuje dvě informace.
První z nich je dána znaménkem a určuje, kterým směrem bude aplikována síla v kloubu.
Druhá informace je dána velikostí hodnoty a určuje velikost této síly.

Simulátor
=========
Simulátor Mujoco funguje jako TODOOOO dynamicky linkovana knihovna napsana v jazyce C.
Tato knihovna poskytuje řadu funkcí, které umožňují řídít běh simulace.
V uživatelkém programu je tedy nutné z poskytnutých funkcí sestavit algoritmus spojité simulace (ukázkové uživtelské programy jsou součástí distribuce).
Uživatel má plnou kontrolu nad během simulace, a to tím, že volá knihovní funkci TODOO mj_step(), která v simulaci pokročí definovaným časem.
Ve smyčce algoritmu spojité simulace jsou vloženy funkce, které ze simulátory čtou pozice jendotlivých obejktů, běh interpretu, výpočet fitness funkce a mapování výstupních hodnot z interpretu na ovládací signály.
Ve zjednodušené formě je program znázorněn na OBRÁZKU.






4.1 Evoluce programu
Pro vyse uvedene case studies doporucuji provest experimenty vzdy s
trojnozkou a mravencem na spirale.
